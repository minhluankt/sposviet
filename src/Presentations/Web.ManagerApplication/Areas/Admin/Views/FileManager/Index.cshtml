@{
    ViewBag.Title = "File Manager";
}

<div id="elfinder"></div>

@section Scripts {
@*    <link rel="stylesheet" href="~/lib/jqueryui/themes/base/theme.css" />
    <link rel="stylesheet" href="~/lib/jqueryui/themes/base/jquery-ui.css" />*@
<link rel="stylesheet" href="~/lib/jquery.ui/jquery-ui.theme.css" />
<link rel="stylesheet" href="~/lib/elFinder/css/elfinder.full.min.css" />
<link rel="stylesheet" href="~/lib/elFinder/css/theme.min.css" />
<link rel="stylesheet" href="~/lib/elFinder/Material/theme-gray.css" />
@*
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>*@
<script src="~/lib/elFinder/js/elfinder.min.js"></script>

<script type="text/javascript">
    // Documentation for client options:
    // https://github.com/Studio-42/elFinder/wiki/Client-configuration-options
    $(document).ready(function () {
        var myCommands = elFinder.prototype._options.commands;

        // Not yet implemented commands in elFinder.NetCore
        var disabled = ['callback', 'chmod', 'editor', 'netmount', 'ping', 'search', 'zipdl', 'help'];
        elFinder.prototype.i18.en.messages.TextArea = "Edit";

        $.each(disabled, function (i, cmd) {
            (idx = $.inArray(cmd, myCommands)) !== -1 && myCommands.splice(idx, 1);
        });

        var options = {
          //  baseUrl: "/lib/elfinder/",
             url: '/el-finder-file-system/connector',
            rememberLastDir: false,
            commands: myCommands,
            lang: 'vi',
            uiOptions: {
                toolbar: [
                    ['back', 'forward'],
                    ['reload'],
                    ['home', 'up'],
                    ['mkdir', 'mkfile', 'upload'],
                    ['open', 'download'],
                    ['undo', 'redo'],
                    ['info'],
                    ['quicklook'],
                    ['copy', 'cut', 'paste'],
                    ['rm'],
                    ['duplicate', 'rename', 'edit'],
                    ['selectall', 'selectnone', 'selectinvert'],
                    ['view', 'sort']
                ]
            }, getFileCallback: function (file, fm) { // editor callback (see: https://github.com/Studio-42/elFinder/wiki/Integration-with-TinyMCE-4.x)

                      // dành cho CKEDITOR
                    //window.opener.CKEDITOR.tools.callFunction((function() {
                    //   var reParam = new RegExp('(?:[\?&]|&amp;)CKEditorFuncNum=([^&]+)', 'i') ;
                    //   var match = window.location.search.match(reParam) ;
                    //   return (match && match.length > 1) ? match[1] : '' ;
                    // })(), file.url);
                    // fm.destroy();
                    // window.close();

                     // dành cho TinyMCE
                    // pass selected file data to TinyMCE
                   /// parent.tinymce.activeEditor.windowManager.getParams().oninsert(file, fm);
                    // close popup window
                   // parent.tinymce.activeEditor.windowManager.close();
                },
            //onlyMimes: ["image", "text/plain"] // Get files of requested mime types only
            lang: 'vi',
        };
        $('#elfinder').elfinder(options).elfinder('instance');
    });
</script>
}