@model Domain.ViewModel.KitChenModel
@using System.Security.Claims;
@{
    Layout = null;
    string roles = string.Empty;
    string Image = string.Empty;
    bool login = false;
    if (User.Identity != null && User.Identity.IsAuthenticated)
    {
        login = true;
        roles = ((ClaimsIdentity)User.Identity).Claims
       .Where(c => c.Type == ClaimTypes.Role)
       .Select(c => c.Value).FirstOrDefault();
        Image = ((ClaimsIdentity)User.Identity).Claims
        .Where(c => c.Type == Application.Constants.ConfigCustomerLogin.Image)
        .Select(c => c.Value).FirstOrDefault();

    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Hệ thống nhà bếp</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, shrink-to-fit=no" />
    <meta name="description" content="Wide selection of cards with multiple styles, borders, actions and hover effects.">
    <meta name="msapplication-tap-highlight" content="no">
    <partial name="Admin/_Styles" />
</head>
<body id="sellting-chitken-skin1" class="skill-pos skin1">
    <div id="parentautocomplete"></div>
   
        <header>
            <h3>Hệ thống nhà bếp</h3>
            <div class="info-login">
                @if (login)
                {

                    <div class="user-name">
                        @User.Identity.Name  <i class="fas fa-bars"></i>
                        <ul class="">
                            <li><a href="/Selling/Pos"><i class="fas fa-concierge-bell"></i> Bán hàng</a></li>
                            <li><a href="/Selling/Dashboard"><i class="fas fa-address-card"></i> Quản trị</a></li>
                            <li><a href="/Identity/Account/Logout?returnUrl=@Url.Page("/account/login", new { area = "identity" })"><i class="fas fa-sign-out-alt"></i>  Đăng xuất</a></li>
                        </ul>
                    </div>
                }
                <audio id="audio" src="~/audio/chuongbao.mp3"></audio>
                <button id="startbtnaudio" class="d-none">Start</button>
            </div>
        </header>
    <div id="datafoodbyroom">
       
    </div>
    <div id="loadingpos">
        <span>
            <img src="~/images/preview.gif" /><br />
            Đang tải dữ liệu
        </span>
    </div>
    <div class="footer-pos">
        Liên hệ hỗ trợ: <a href="tel:0949906004">0949.906.004 Mr. Luận</a>
    </div>
    @*    <script type="text/javascript" src="~/lib/signalr/signalr.min.js"></script>*@


    <script type="text/javascript" src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>


    <partial name="Admin/_Scripts" />
    <script src="~/js/custom/sposvietkyso.min.js?time=678"></script>
    <script>
        //testConnetWebSocket();
        loadcentChitkent.intEvent();
        document.onreadystatechange = function () {
            var state = document.readyState
            if (state == 'complete') {
                checkautido();
                // playaudioNotifyChitchen();  //example function call.
                setTimeout(function () {
                    document.getElementById('loadingpos');
                    document.getElementById('loadingpos').style.visibility = "hidden";
                }, 100);
            }
        }

        loadcentChitkent.loadDataByRoomSkin1(true);

        $(document).ready(function () {
          //  loadcentChitkent.loadeventtimeago();
        });
        document.addEventListener('DOMContentLoaded', async function () {
            var interval = null;
            var connectionKitchenIndex = new signalR.HubConnectionBuilder()
                .withAutomaticReconnect({
                    nextRetryDelayInMilliseconds: retryContext => {
                        if (retryContext.elapsedMilliseconds < 36000000) { //600 phút nhé là 10 tiếng
                            console.log("đang conncet");
                            // If we've been reconnecting for less than 60 seconds so far,
                            // wait between 0 and 10 seconds before the next reconnect attempt.
                            //return Math.random() * 3000;
                            return 1000;
                        } else {
                            // If we've been reconnecting for more than 60 seconds so far, stop reconnecting.
                            return null;
                        }
                    }
                })
                .withUrl('/Signal')
                .build();
            function start() {
                try {
                    connectionKitchenIndex.start()
                        .then(function () {
                            connectionKitchenIndex.invoke('Printbaobep', "ok", "TEST");
                            connectionKitchenIndex.invoke('StaffAlertBep', 1, "TEST");
                            connectionKitchenIndex.invoke('FeedbackBepToStaff', "", "TEST", 0);
                            console.assert(connectionKitchenIndex.state === signalR.HubConnectionState.Connected);
                            console.log("SignalR Connected.");
                            clearInterval(interval);
                        })
                        .catch(error => {
                            // loadeventPos.NotifyChitken();
                            console.error(error.message);
                        });

                } catch (err) {
                    console.assert(connectionKitchenIndex.state === signalR.HubConnectionState.Disconnected);
                    console.log(err);
                    setTimeout(() => start(), 2000);
                }
            };
            // Create a function that the hub can call to broadcast messages.
            connectionKitchenIndex.on('addMessageCHITKEN', function (isValid) {
                console.log("isValid" + isValid);
                loadcentChitkent.loadDataByRoomSkin1();
                if (isValid) {
                    playaudioNotifyChitchen();
                }

            });
            connectionKitchenIndex.on('Printbaobep', function (data) {
                // toastr.success(data)
                if (data == "TEST") {
                    console.log("Test in bếp");
                } else {
                    loadeventPos.eventinbaobep(data);
                }

            }); 
            connectionKitchenIndex.on('StaffAlertBep', function (data) {
                if(data!="TEST"){
                    loadcentChitkent.loadDatacancelFood(data);
                }else{
                    toastr.success("Kết nối máy chủ thành công")
                }
            });
            connectionKitchenIndex.onclose(async () => {
                console.log("onclose đang connect");
                interval = setInterval(function () {
                    start();
                }, 2000);

            });
            start();

            // Transport fallback functionality is now built into start.

        });

    </script>
    @await Component.InvokeAsync("Notyf")
</body>
</html>
